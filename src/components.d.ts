/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface SkButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color": | 'primary'
    | 'outline-primary'
    | 'secondary'
    | 'outline-secondary'
    | 'tertiary'
    | 'outline-tertiary'
    | 'success'
    | 'outline-success'
    | 'warning'
    | 'outline-warning'
    | 'danger'
    | 'outline-danger'
    | 'light'
    | 'outline-light'
    | 'dark'
    | 'outline-dark'
    | 'blackcurrant'
    | 'outline-blackcurrant';
        /**
          * Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled": boolean;
        /**
          * Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.
         */
        "expand": boolean;
        /**
          * Accepts the id of the sk-modal component to open it on click
         */
        "modalTriggerId": string;
        /**
          * Size of the button.
         */
        "size": 'nano' | 'small' | 'medium' | 'large';
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type": 'button' | 'reset' | 'submit';
    }
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLSkButtonElement extends Components.SkButton, HTMLStencilElement {
    }
    var HTMLSkButtonElement: {
        prototype: HTMLSkButtonElement;
        new (): HTMLSkButtonElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "sk-button": HTMLSkButtonElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface SkButton {
        /**
          * Identifier of  the theme based on which the button is styled.
         */
        "color"?: | 'primary'
    | 'outline-primary'
    | 'secondary'
    | 'outline-secondary'
    | 'tertiary'
    | 'outline-tertiary'
    | 'success'
    | 'outline-success'
    | 'warning'
    | 'outline-warning'
    | 'danger'
    | 'outline-danger'
    | 'light'
    | 'outline-light'
    | 'dark'
    | 'outline-dark'
    | 'blackcurrant'
    | 'outline-blackcurrant';
        /**
          * Disables the button on the interface. If the attribute’s value is undefined, the value is set to false.
         */
        "disabled"?: boolean;
        /**
          * Sets the button to a full-width block. If the attribute’s value is undefined, the value is set to false.
         */
        "expand"?: boolean;
        /**
          * Accepts the id of the sk-modal component to open it on click
         */
        "modalTriggerId"?: string;
        /**
          * Triggered when the button loses focus.
         */
        "onSkBlur"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button is clicked.
         */
        "onSkClick"?: (event: CustomEvent<void>) => void;
        /**
          * Triggered when the button comes into focus.
         */
        "onSkFocus"?: (event: CustomEvent<void>) => void;
        /**
          * Size of the button.
         */
        "size"?: 'nano' | 'small' | 'medium' | 'large';
        /**
          * Button type based on which actions are performed when the button is clicked.
         */
        "type"?: 'button' | 'reset' | 'submit';
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "sk-button": SkButton;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "sk-button": LocalJSX.SkButton & JSXBase.HTMLAttributes<HTMLSkButtonElement>;
        }
    }
}
